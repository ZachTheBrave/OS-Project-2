package nachos.threads;
import nachos.ag.BoatGrader;

public class Boat
{
    static BoatGrader bg;
	private static int cload1; 
    private static int aload1; 
    private static int cload2; 
    private static int adultload2;  
    private static int childrenWait1;
    private static int childrenFrom1; 
    private static boolean isBoatAt1;
    private static Lock island1 = new Lock(); 
    private static Lock island2 = new Lock(); 
    private static Condition adult1 = new Condition(island1); 
    private static Condition childOnLand2 = new Condition(island2); 
    private static Condition childOnLand1 = new Condition(island1); 
    private static Condition childOnBoat1 = new Condition(island1); 
    private static Semaphore completed = new Semaphore(0);

    public static void selfTest()
    {
	BoatGrader b = new BoatGrader();
	
	System.out.println("\n ***Testing Boats with only 2 children***");
	begin(0, 2, b);

//	System.out.println("\n ***Testing Boats with 2 children, 1 adult***");
//  	begin(1, 2, b);

//  	System.out.println("\n ***Testing Boats with 3 children, 3 adults***");
//  	begin(3, 3, b);
    }

    public static void begin( int adults, int children, BoatGrader b )
    {
	// Store the externally generated autograder in a class
	// variable to be accessible by children.
		bg = b;
		variableInitialization(adults, children, b); 		
	// Instantiate global variables here
		
	// Create threads here. See section 3.4 of the Nachos for Java
	// Walkthrough linked from the projects page.
//LOOK IF IF LOOP WILL WORK INTEAD OF FOR

for(int z = 0; z < children; z++){
	new KThread(
		new Runnable(){
			public void run() {
				ChildItinerary();
			}
}
	).setName("child" + z).fork();
}

for(int z = 0; z < adults; z++){
	new KThread(
		new Runnable() {
		public void run() {
			AdultItinerary();
		}	
		}
	).setName("adult" + z).fork();
}
completed.P();
	}
static void variableInitialization(int a, int c, BoatGrader b) { 

		bg = b;
		cload1 = c; 
		aload1 = a; 
		cload2 = 0; 
		adultload2 = 0; 
		childrenWait1 = 0; 
		childrenFrom1 = 0; 
		isBoatAt1 = true;
}

	//Runnable r = new Runnable() {
	  //  public void run() {
        //        SampleItinerary();
          //  }
        //};
        //KThread t = new KThread(r);
        //t.setName("Sample Boat Thread");
        //t.fork();

    
	
    static void AdultItinerary()
    {
	/* This is where you should put your solutions. Make calls
	   to the BoatGrader to show that it is synchronized. For
	   example:
	       bg.AdultRowToMolokai();
	   indicates that an adult has rowed the boat across to Molokai
	*/
	island1.acquire();
	while(cload1 > 1 || !isBoatAt1){
		adult1.sleep();
	}
aload1 = aload1 -1;
isBoatAt1 = false;
    island1.release();
	bg.AdultRowToMolokai();
	island2.acquire();
	adultload2 = adultload2 - 1;
	childOnLand2.wake();
	island2.release();
}

    static void ChildItinerary()
    {
		while(cload1 + aload1 > 1){
			island1.acquire();
if(cload1 == 1){
	adult1.wake();
}
		while(childrenWait1 >= 2 || !isBoatAt1){
			childOnLand1.sleep();
		}
		if (childrenWait1 == 0) { 
		childrenWait1++;
		childOnLand1.wake(); 
		childOnBoat1.sleep();
		bg.ChildRideToMolokai(); 
		
		childOnBoat1.wake(); 
	} else { 
		childrenWait1++;
		childOnBoat1.wake(); 
		
		bg.ChildRowToMolokai(); 
		childOnBoat1.sleep(); 
		
	}
	
	childrenWait1--; 
	cload1--; 
	isBoatAt1 = false; 
	island1.release(); 
	island2.acquire();
	cload2++; 
	childrenFrom1++;
	
	
	if (childrenFrom1 == 1) {
		childOnLand2.sleep();
	}

	cload2--; 
	childrenFrom1 = 0; 
	island2.release();
	bg.ChildRowToOahu(); 
	island1.acquire();
	cload1++; 
	isBoatAt1 = true; 
	island1.release();
}

	island1.acquire();
	cload1--;
	island1.release();
	bg.ChildRowToMolokai();	
	island2.acquire();
	cload2++;
	island2.release();
	completed.V();
	    }

    static void SampleItinerary()
    {
	// Please note that this isn't a valid solution (you can't fit
	// all of them on the boat). Please also note that you may not
	// have a single thread calculate a solution and then just play
	// it back at the autograder -- you will be caught.
	System.out.println("\n ***Everyone piles on the boat and goes to Molokai***");
	bg.AdultRowToMolokai();
	bg.ChildRideToMolokai();
	bg.AdultRideToMolokai();
	bg.ChildRideToMolokai();
    }
    
}
